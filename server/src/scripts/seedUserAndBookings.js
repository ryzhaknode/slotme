import { PrismaClient } from '../generated/prisma/index.js';
import bcrypt from 'bcrypt';

const prisma = new PrismaClient();

async function seedUserAndBookings() {
  try {
    console.log('üå± Seeding user and bookings...');

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const hashedPassword = await bcrypt.hash('password123', 10);
    
    const user = await prisma.user.upsert({
      where: { email: 'test@example.com' },
      update: {},
      create: {
        name: 'Test User',
        email: 'test@example.com',
        password: hashedPassword,
      },
    });

    console.log('‚úÖ User created:', user.email);

    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é —É—Å–ª—É–≥—É
    const service = await prisma.service.findFirst();
    
    if (!service) {
      console.log('‚ùå No service found. Please seed services first.');
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
    const bookings = [
      {
        date: new Date('2025-10-01'),
        startTime: '12:00',
        endTime: '13:00',
        serviceId: service.id,
        userId: user.id,
      },
      {
        date: new Date('2025-10-01'),
        startTime: '14:00',
        endTime: '15:00',
        serviceId: service.id,
        userId: user.id,
      },
      {
        date: new Date('2025-10-01'),
        startTime: '16:00',
        endTime: '17:00',
        serviceId: service.id,
        userId: user.id,
      },
    ];

    for (const bookingData of bookings) {
      await prisma.booking.create({
        data: bookingData,
      });
    }

    console.log('‚úÖ Bookings seeded successfully!');
  } catch (error) {
    console.error('‚ùå Error seeding user and bookings:', error);
  } finally {
    await prisma.$disconnect();
  }
}

seedUserAndBookings();
